[
    {
        "name": "lume",
        "author": "rxi",
        "url": "https://github.com/rxi/lume",
        "description": "A collection of functions for Lua, geared towards game development.",
        "api": [
            {
                "name": "clamp",
                "arguments": "x, min, max",
                "description": "Returns the number `x` clamped between the numbers `min` and `max`"
            },
            {
                "name": "round",
                "arguments": "x [, increment]",
                "description": "Rounds `x` to the nearest integer; rounds away from zero if we're midway between two integers. If `increment` is set then the number is rounded to the nearest increment.",
                "example": "lume.round(2.3) -- Returns 2\nlume.round(123.4567, .1) -- Returns 123.5"
            },
            {
                "name": "sign",
                "arguments": "x",
                "description": "Returns `1` if `x` is 0 or above, returns `-1` when `x` is negative."
            },
            {
                "name": "lerp",
                "arguments": "a, b, amount",
                "description": "Returns the linearly interpolated number between `a` and `b`, `amount` should be in the range of 0 - 1; if `amount` is outside of this range it is clamped.",
                "example": "lume.lerp(100, 200, .5) -- Returns 150"
            },
            {
                "name": "smooth",
                "arguments": "a, b, amount",
                "description": "Similar to `lume.lerp()` but uses cubic interpolation instead of linear interpolation."
            },
            {
                "name": "pingpong",
                "arguments": "x",
                "description": "Ping-pongs the number `x` between 0 and 1."
            },
            {
                "name": "distance",
                "arguments": "x1, y1, x2, y2 [, squared]",
                "description": "Returns the distance between the two points. If `squared` is true then the squared distance is returned -- this is faster to calculate and can still be used when comparing distances."
            },
            {
                "name": "angle",
                "arguments": "x1, y1, x2, y2",
                "description": "Returns the angle between the two points."
            },
            {
                "name": "vector",
                "arguments": "angle, magnitude",
                "description": "Given an `angle` and `magnitude`, returns a vector.",
                "example": "local x, y = lume.vector(0, 10) -- Returns 10, 0"
            },
            {
                "name": "random",
                "arguments": "[a [, b]]",
                "description": "Returns a random number between `a` and `b`. If only `a` is supplied a number between `0` and `a` is returned. If no arguments are supplied a random number between `0` and `1` is returned."
            },
            {
                "name": "randomchoice",
                "arguments": "t",
                "description": "Returns a random value from array `t`. If the array is empty an error is raised.",
                "example": "lume.randomchoice({true, false}) -- Returns either true or false"
            },
            {
                "name": "weightedchoice",
                "arguments": "t",
                "description": "Takes the argument table `t` where the keys are the possible choices and the value is the choice's weight. A weight should be 0 or above, the larger the number the higher the probability of that choice being picked. If the table is empty, a weight is below zero or all the weights are 0 then an error is raised.",
                "example": "lume.weightedchoice({ [\"cat\"] = 10, [\"dog\"] = 5, [\"frog\"] = 0 })\n-- Returns either \"cat\" or \"dog\" with \"cat\" being twice as likely to be chosen."
            },
            {
                "name": "isarray",
                "arguments": "x",
                "description": "Returns `true` if `x` is an array -- the value is assumed to be an array if it is a table which contains a value at the index `1`. This function is used internally and can be overridden if you wish to use a different method to detect arrays."
            },
            {
                "name": "push",
                "arguments": "t, ...",
                "description": "Pushes all the given values to the end of the table `t` and returns the pushed values. Nil values are ignored.",
                "example": "local t = { 1, 2, 3 }\nlume.push(t, 4, 5) -- `t` becomes { 1, 2, 3, 4, 5 }"
            },
            {
                "name": "remove",
                "arguments": "t, x",
                "description": "Removes the first instance of the value `x` if it exists in the table `t`. Returns `x`.",
                "example": "local t = { 1, 2, 3 }\nlume.remove(t, 2) -- `t` becomes { 1, 3 }"
            },
            {
                "name": "clear",
                "arguments": "t",
                "description": "Nils all the values in the table `t`, this renders the table empty. Returns `t`.",
                "example": "local t = { 1, 2, 3 }\nlume.clear(t) -- `t` becomes {}"
            },
            {
                "name": "extend",
                "arguments": "t, ...",
                "description": "Copies all the fields from the source tables to the table `t` and returns `t`. If a key exists in multiple tables the right-most table's value is used.",
                "example": "local t = { a = 1, b = 2 }\nlume.extend(t, { b = 4, c = 6 }) -- `t` becomes { a = 1, b = 4, c = 6 }"
            },
            {
                "name": "shuffle",
                "arguments": "t",
                "description": "Returns a shuffled copy of the array `t`."
            },
            {
                "name": "sort",
                "arguments": "t [, comp]",
                "description": "Returns a copy of the array `t` with all its items sorted. If `comp` is a function it will be used to compare the items when sorting. If `comp` is a string it will be used as the key to sort the items by.",
                "example": "lume.sort({ 1, 4, 3, 2, 5 }) -- Returns { 1, 2, 3, 4, 5 }\nlume.sort({ {z=2}, {z=3}, {z=1} }, \"z\") -- Returns { {z=1}, {z=2}, {z=3} }\nlume.sort({ 1, 3, 2 }, function(a, b) return a > b end) -- Returns { 3, 2, 1 }"
            },
            {
                "name": "array",
                "arguments": "...",
                "description": "Iterates the supplied iterator and returns an array filled with the values.",
                "example": "lume.array(string.gmatch(\"Hello world\", \"%a+\")) -- Returns {\"Hello\", \"world\"}"
            },
            {
                "name": "each",
                "arguments": "t, fn, ...",
                "description": "Iterates the table `t` and calls the function `fn` on each value followed by the supplied additional arguments; if `fn` is a string the method of that name is called for each value. The function returns `t` unmodified.",
                "example": "lume.each({1, 2, 3}, print) -- Prints \"1\", \"2\", \"3\" on separate lines\nlume.each({a, b, c}, \"move\", 10, 20) -- Does x:move(10, 20) on each value"
            },
            {
                "name": "map",
                "arguments": "t, fn",
                "description": "Applies the function `fn` to each value in table `t` and returns a new table with the resulting values.",
                "example": "lume.map({1, 2, 3}, function(x) return x * 2 end) -- Returns {2, 4, 6}"
            },
            {
                "name": "all",
                "arguments": "t [, fn]",
                "description": "Returns true if all the values in `t` table are true. If a `fn` function is supplied it is called on each value, true is returned if all of the calls to `fn` return true.",
                "example": "lume.all({1, 2, 1}, function(x) return x == 1 end) -- Returns false"
            },
            {
                "name": "any",
                "arguments": "t [, fn]",
                "description": "Returns true if any of the values in `t` table are true. If a `fn` function is supplied it is called on each value, true is returned if any of the calls to `fn` return true.",
                "example": "lume.any({1, 2, 1}, function(x) return x == 1 end) -- Returns true"
            },
            {
                "name": "reduce",
                "arguments": "t, fn [, first]",
                "description": "Applies `fn` on two arguments cumulative to the items of the array `t`, from left to right, so as to reduce the array to a single value. If a `first` value is specified the accumulator is initialised to this, otherwise the first value in the array is used. If the array is empty and no `first` value is specified an error is raised.",
                "example": "lume.reduce({1, 2, 3}, function(a, b) return a + b end) -- Returns 6"
            },
            {
                "name": "unique",
                "arguments": "t",
                "description": "Returns a copy of the `t` array with all the duplicate values removed.",
                "example": "lume.unique({2, 1, 2, \"cat\", \"cat\"}) -- Returns {1, 2, \"cat\"}"
            },
            {
                "name": "filter",
                "arguments": "t, fn [, retainkeys]",
                "description": "Calls `fn` on each value of `t` table. Returns a new table with only the values where `fn` returned true. If `retainkeys` is true the table is not treated as an array and retains its original keys.",
                "example": "lume.filter({1, 2, 3, 4}, function(x) return x % 2 == 0 end) -- Returns {2, 4}"
            },
            {
                "name": "reject",
                "arguments": "t, fn [, retainkeys]",
                "description": "The opposite of `lume.filter()`: Calls `fn` on each value of `t` table; returns a new table with only the values where `fn` returned false. If `retainkeys` is true the table is not treated as an array and retains its original keys.",
                "example": "lume.reject({1, 2, 3, 4}, function(x) return x % 2 == 0 end) -- Returns {1, 3}"
            },
            {
                "name": "merge",
                "arguments": "...",
                "description": "Returns a new table with all the given tables merged together. If a key exists in multiple tables the right-most table's value is used.",
                "example": "lume.merge({a=1, b=2, c=3}, {c=8, d=9}) -- Returns {a=1, b=2, c=8, d=9}"
            },
            {
                "name": "concat",
                "arguments": "...",
                "description": "Returns a new array consisting of all the given arrays concatenated into one.",
                "example": "lume.concat({1, 2}, {3, 4}, {5, 6}) -- Returns {1, 2, 3, 4, 5, 6}"
            },
            {
                "name": "find",
                "arguments": "t, value",
                "description": "Returns the index/key of `value` in `t`. Returns `nil` if that value does not exist in the table.",
                "example": "lume.find({\"a\", \"b\", \"c\"}, \"b\") -- Returns 2"
            },
            {
                "name": "match",
                "arguments": "t, fn",
                "description": "Returns the value and key of the value in table `t` which returns true when `fn` is called on it. Returns `nil` if no such value exists.",
                "example": "lume.match({1, 5, 8, 7}, function(x) return x % 2 == 0 end) -- Returns 8, 3"
            },
            {
                "name": "count",
                "arguments": "t [, fn]",
                "description": "Counts the number of values in the table `t`. If a `fn` function is supplied it is called on each value, the number of times it returns true is counted.",
                "example": "lume.count({a = 2, b = 3, c = 4, d = 5}) -- Returns 4\nlume.count({1, 2, 4, 6}, function(x) return x % 2 == 0 end) -- Returns 3"
            },
            {
                "name": "slice",
                "arguments": "t [, i [, j]]",
                "description": "Mimics the behaviour of Lua's `string.sub`, but operates on an array rather than a string. Creates and returns a new array of the given slice.",
                "example": "lume.slice({\"a\", \"b\", \"c\", \"d\", \"e\"}, 2, 4) -- Returns {\"b\", \"c\", \"d\"}"
            },
            {
                "name": "first",
                "arguments": "t [, n]",
                "description": "Returns the first element of an array or nil if the array is empty. If `n` is specificed an array of the first `n` elements is returned.",
                "example": "lume.first({\"a\", \"b\", \"c\"}) -- Returns \"a\""
            },
            {
                "name": "last",
                "arguments": "t [, n]",
                "description": "Returns the last element of an array or nil if the array is empty. If `n` is specificed an array of the last `n` elements is returned.",
                "example": "lume.last({\"a\", \"b\", \"c\"}) -- Returns \"c\""
            },
            {
                "name": "invert",
                "arguments": "t",
                "description": "Returns a copy of the table where the keys have become the values and the values the keys.",
                "example": "lume.invert({a = \"x\", b = \"y\"}) -- returns {x = \"a\", y = \"b\"}"
            },
            {
                "name": "pick",
                "arguments": "t, ...",
                "description": "Returns a copy of the table filtered to only contain values for the given keys.",
                "example": "lume.pick({ a = 1, b = 2, c = 3 }, \"a\", \"c\") -- Returns { a = 1, c = 3 }"
            },
            {
                "name": "keys",
                "arguments": "t",
                "description": "Returns an array containing each key of the table."
            },
            {
                "name": "clone",
                "arguments": "t",
                "description": "Returns a shallow copy of the table `t`."
            },
            {
                "name": "fn",
                "arguments": "fn, ...",
                "description": "Creates a wrapper function around function `fn`, automatically inserting the arguments into `fn` which will persist every time the wrapper is called. Any arguments which are passed to the returned function will be inserted after the already existing arguments passed to `fn`.",
                "example": "local f = lume.fn(print, \"Hello\")\nf(\"world\") -- Prints \"Hello world\""
            },
            {
                "name": "once",
                "arguments": "fn, ...",
                "description": "Returns a wrapper function to `fn` which takes the supplied arguments. The wrapper function will call `fn` on the first call and do nothing on any subsequent calls.",
                "example": "local f = lume.once(print, \"Hello\")\nf() -- Prints \"Hello\"f() -- Does nothing"
            },
            {
                "name": "memoize",
                "arguments": "fn",
                "description": "Returns a wrapper function to `fn` where the results for any given set of arguments are cached. `lume.memoize()` is useful when used on functions with slow-running computations.",
                "example": "fib = lume.memoize(function(n) return n < 2 and n or fib(n-1) + fib(n-2) end)"
            },
            {
                "name": "combine",
                "arguments": "...",
                "description": "Creates a wrapper function which calls each supplied argument in the order they were passed to `lume.combine()`; nil arguments are ignored. The wrapper function passes its own arguments to each of its wrapped functions when it is called.",
                "example": "local f = lume.combine(function(a, b) print(a + b) end,\n                       function(a, b) print(a * b) end)\nf(3, 4) -- Prints \"7\" then \"12\" on a new line"
            },
            {
                "name": "call",
                "arguments": "fn, ...",
                "description": "Calls the given function with the provided arguments and returns its values. If `fn` is `nil` then no action is performed and the function returns `nil`.",
                "example": "lume.call(print, \"Hello world\") -- Prints \"Hello world\""
            },
            {
                "name": "time",
                "arguments": "fn, ...",
                "description": "Inserts the arguments into function `fn` and calls it. Returns the time in seconds the function `fn` took to execute followed by `fn`'s returned values.",
                "example": "lume.time(function(x) return x end, \"hello\") -- Returns 0, \"hello\""
            },
            {
                "name": "lambda",
                "arguments": "str",
                "description": "Takes a string lambda and returns a function. `str` should be a list of comma-separated parameters, followed by `->`, followed by the expression which will be evaluated and returned.",
                "example": "local f = lume.lambda \"x,y -> 2*x+y\"\nf(10, 5) -- Returns 25"
            },
            {
                "name": "serialize",
                "arguments": "x",
                "description": "Serializes the argument `x` into a string which can be loaded again using `lume.deserialize()`. Only booleans, numbers, tables and strings can be serialized. Circular references will result in an error; all nested tables are serialized as unique tables.",
                "example": "lume.serialize({a = \"test\", b = {1, 2, 3}, false})\n-- Returns \"{[1]=false,[\"a\"]=\"test\",[\"b\"]={[1]=1,[2]=2,[3]=3,},}\""
            },
            {
                "name": "deserialize",
                "arguments": "str",
                "description": "Deserializes a string created by `lume.serialize()` and returns the resulting value. This function should not be run on an untrusted string.",
                "example": "lume.deserialize(\"{1, 2, 3}\") -- Returns {1, 2, 3}"
            },
            {
                "name": "split",
                "arguments": "str [, sep]",
                "description": "Returns an array of the words in the string `str`. If `sep` is provided it is used as the delimiter, consecutive delimiters are not grouped together and will delimit empty strings.",
                "example": "lume.split(\"One two three\") -- Returns {\"One\", \"two\", \"three\"}"
            },
            {
                "name": "trim",
                "arguments": "str [, chars]",
                "description": "Trims the whitespace from the start and end of the string `str` and returns the new string. If a `chars` value is set the characters in `chars` are trimmed instead of whitespace.",
                "example": "lume.trim(\"  Hello  \") -- Returns \"Hello\""
            },
            {
                "name": "wordwrap",
                "arguments": "str [, limit]",
                "description": "Returns `str` wrapped to `limit` number of characters per line, by default `limit` is `72`. `limit` can also be a function which when passed a string, returns `true` if it is too long for a single line.",
                "example": "-- Returns \"Hello world\nThis is a\nshort string\"\nlume.wordwrap(\"Hello world. This is a short string\", 14)"
            },
            {
                "name": "format",
                "arguments": "str [, vars]",
                "description": "Returns a formatted string. The values of keys in the table `vars` can be inserted into the string by using the form `\"{key}\"` in `str`; numerical keys can also be used.",
                "example": "lume.format(\"{b} hi {a}\", {a = \"mark\", b = \"Oh\"}) -- Returns \"Oh hi mark\"\nlume.format(\"Hello {1}!\", {\"world\"}) -- Returns \"Hello world!\""
            },
            {
                "name": "trace",
                "arguments": "...",
                "description": "Prints the current filename and line number followed by each argument separated by a space.",
                "example": "-- Assuming the file is called \"example.lua\" and the next line is 12:\nlume.trace(\"hello\", 1234) -- Prints \"example.lua:12: hello 1234\""
            },
            {
                "name": "dostring",
                "arguments": "str",
                "description": "Executes the lua code inside `str`.",
                "example": "lume.dostring(\"print('Hello!')\") -- Prints \"Hello!\""
            },
            {
                "name": "uuid",
                "arguments": "",
                "description": "Generates a random UUID string; version 4 as specified in [RFC 4122](http://www.ietf.org/rfc/rfc4122.txt)."
            },
            {
                "name": "hotswap",
                "arguments": "modname",
                "description": "Reloads an already loaded module in place, allowing you to immediately see the effects of code changes without having to restart the program. `modname` should be the same string used when loading the module with require(). In the case of an error the global environment is restored and `nil` plus an error message is returned.",
                "example": "lume.hotswap(\"lume\") -- Reloads the lume module\nassert(lume.hotswap(\"inexistant_module\")) -- Raises an error"
            },
            {
                "name": "ripairs",
                "arguments": "t",
                "description": "Performs the same function as `ipairs()` but iterates in reverse; this allows the removal of items from the table during iteration without any items being skipped.",
                "example": "-- Prints \"3->c\", \"2->b\" and \"1->a\" on separate lines\nfor i, v in lume.ripairs({ \"a\", \"b\", \"c\" }) do\n  print(i .. \"->\" .. v)\nend"
            },
            {
                "name": "color",
                "arguments": "str [, mul]",
                "description": "Takes color string `str` and returns 4 values, one for each color channel (`r`, `g`, `b` and `a`). By default the returned values are between 0 and 1; the values are multiplied by the number `mul` if it is provided.",
                "example": "lume.color(\"#ff0000\")               -- Returns 1, 0, 0, 1\nlume.color(\"rgba(255, 0, 255, .5)\") -- Returns 1, 0, 1, .5\nlume.color(\"#00ffff\", 256)          -- Returns 0, 256, 256, 256\nlume.color(\"rgb(255, 0, 0)\", 256)   -- Returns 256, 0, 0, 256"
            },
            {
                "name": "chain",
                "arguments": "value",
                "description": "Returns a wrapped object which allows chaining of lume functions. The function result() should be called at the end of the chain to return the resulting value.",
                "example": "lume.chain({1, 2, 3, 4})\n  :filter(function(x) return x % 2 == 0 end)\n  :map(function(x) return -x end)\n  :result() -- Returns { -2, -4 }"
            }
        ]
    },
    {
        "name": "batteries",
        "author": "1bardesign",
        "url": "https://github.com/1bardesign/batteries",
        "description": "batteries fills out lua's sparse standard library a little, and provides implementations of common algorithms and data structures useful for games.",
        "api": [
            {
                "name": "mathx.wrap",
                "arguments": "v, lo, hi",
                "description": "Wrap v around range [lo, hi)"
            },
            {
                "name": "mathx.wrap_index",
                "arguments": "i, t",
                "description": "Wrap i around the indices of t"
            },
            {
                "name": "mathx.clamp",
                "arguments": "v, lo, hi",
                "description": "Clamp v to range [lo, hi]"
            },
            {
                "name": "mathx.clamp01",
                "arguments": "v",
                "description": "Clamp v to range [0, 1]"
            },
            {
                "name": "mathx.round",
                "arguments": "v",
                "description": "Round v to nearest whole, away from zero"
            },
            {
                "name": "mathx.to_one_in",
                "arguments": "v, x",
                "description": "Round v to one-in x"
            },
            {
                "name": "mathx.to_precision",
                "arguments": "v, decimal_points",
                "description": "Round v to a given decimal precision"
            },
            {
                "name": "mathx.sign",
                "arguments": "v",
                "description": "0, 1, -1 sign of a scalar"
            },
            {
                "name": "mathx.lerp",
                "arguments": "a, b, t",
                "description": "Linear interpolation between a and b"
            },
            {
                "name": "mathx.lerp_eps",
                "arguments": "a, b, t, eps",
                "description": "Linear interpolation with a minimum \"final step\" distance\nUseful for making sure dynamic lerps do actually reach their final destination"
            },
            {
                "name": "mathx.bilerp",
                "arguments": "a, b, c, d, u, v",
                "description": "Bilinear interpolation between 4 samples"
            },
            {
                "name": "mathx.smoothstep",
                "arguments": "v",
                "description": "Classic smoothstep\n(Only \"safe\" for 0-1 range)"
            },
            {
                "name": "mathx.smootherstep",
                "arguments": "v",
                "description": "Classic smootherstep; zero 2nd order derivatives at 0 and 1\n(Only safe for 0-1 range)"
            },
            {
                "name": "mathx.random_sign",
                "arguments": "_r",
                "description": "Return a random sign"
            },
            {
                "name": "mathx.random_lerp",
                "arguments": "min, max, _r",
                "description": "Return a random value between two numbers (continuous)"
            },
            {
                "name": "mathx.isnan",
                "arguments": "v",
                "description": "Nan checking"
            },
            {
                "name": "mathx.tau",
                "callable": false,
                "description": "Superior constant handy for expressing things in turns"
            },
            {
                "name": "mathx.normalise_angle",
                "arguments": "a",
                "description": "Normalise angle onto the interval [-math.pi, math.pi)\nSo each angle only has a single value representing it"
            },
            {
                "name": "mathx.normalize_angle",
                "callable": false,
                "description": "Normalize angle onto the interval [-math.pi, math.pi)\nSo each angle only has a single value representing it"
            },
            {
                "name": "mathx.angle_difference",
                "arguments": "a, b",
                "description": "Get the normalised difference between two angles"
            },
            {
                "name": "mathx.lerp_angle",
                "arguments": "a, b, t",
                "description": "Mathx.lerp equivalent for angles"
            },
            {
                "name": "mathx.lerp_angle_eps",
                "arguments": "a, b, t, eps",
                "description": "Mathx.lerp_eps equivalent for angles"
            },
            {
                "name": "mathx.rotate",
                "arguments": "x, y, r",
                "description": "Rotate a point around the origin by an angle"
            },
            {
                "name": "mathx.length",
                "arguments": "x, y",
                "description": "Get the length of a vector from the origin"
            },
            {
                "name": "mathx.distance",
                "arguments": "x1, y1, x2, y2",
                "description": "Get the distance between two points"
            }
        ]
    },
    {
        "name": "step",
        "author": "Sheepolution",
        "url": "https://github.com/sheepolution/step",
        "description": "A small immediate mode timer module that makes it easier to have an action execute with a certain interval or after a delay.",
        "callType": ".",
        "api": [
            {
                "name": "every",
                "arguments": "duration [, max_duration]",
                "description": "Creates a timer which returns true every `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every loop.",
                "example": "timer = step.every(3)\nif timer:update(dt) then\n  print(\"This will be printed every 3 seconds\")\nend"
            },
            {
                "name": "update",
                "arguments": "dt",
                "description": "Update the timer with `timer:update(dt)` or by calling your timer (`timer(dt)`) and pass the delta time as argument.",
                "example": "if timer(dt) then\n  print(\"This will be printed every 3 seconds.\")\nend"
            },
            {
                "name": "after",
                "arguments": "duration [, max_duration]",
                "description": "Creates a timer which continuously returns true after `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every reset.",
                "example": "timer = step.after(3)\nif timer:update(dt) then\n  print(\"After 3 seconds this will be printed every frame.\")\nend"
            },
            {
                "name": "once",
                "arguments": "duration [, max_duration]",
                "description": "Creates a timer which returns true once after `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every reset.",
                "example": "timer = step.once(3)\nif timer:update(dt) then\n  print(\"After 3 seconds this will be printed once.\")\nend"
            },
            {
                "name": "during",
                "arguments": "duration [, max_duration]",
                "description": "Creates a timer which returns true until after `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every reset.",
                "example": "timer = step.once(3)\nif timer:update(dt) then\n  print(\"This will be printed every frame until 3 seconds have passed.\")\nend"
            },
            {
                "name": "reset",
                "description": "You can always reset your timer with `timer:reset()` or simply calling your timer without arguments.",
                "example": "timer:reset()\ntimer()"
            },
            {
                "name": "set",
                "arguments": "t [, noreset]",
                "description": "Change the time for this timer. Will also reset the timer unless `noreset` is `true`.",
                "example": "timer = step.every(5)\ntimer:set(3) --Now it will loop every 3 seconds instead."
            },
            {
                "name": "finish",
                "description": "Set the timer to the end so that on the next update it will return `true` for a `once` and `every` timer.",
                "example": "timer = step.new(4.7)\ntimer:finish()\nif timer(dt) then\n  print(\"On the first frame this will be printed and then again after 4.7 seconds.\")\nend"
            }
        ]
    }
]