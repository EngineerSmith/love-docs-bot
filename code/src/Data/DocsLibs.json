[
    {
        "name": "step",
        "author": "Sheepolution",
        "description": "A small immediate mode timer module that makes it easier to have an action execute with a certain interval or after a delay.",
        "url": "https://github.com/sheepolution/step",
        "callType": ".",
        "api": [
            {
                "name": "every",
                "arguments": "duration, [max_duration]",
                "description": "Creates a timer which returns true every `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every loop.",
                "example": "timer = step.every(3)\nif timer:update(dt) then\n  print(\"This will be printed every 3 seconds\")\nend"
            },
            {
                "name": "update",
                "arguments": "dt",
                "description": "Update the timer with `timer:update(dt)` or by calling your timer (`timer(dt)`) and pass the delta time as argument.",
                "example": "if timer(dt) then\n  print(\"This will be printed every 3 seconds.\")\nend"
            },
            {
                "name": "after",
                "arguments": "duration, [max_duration]",
                "description": "Creates a timer which continuously returns true after `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every reset.",
                "example": "timer = step.after(3)\nif timer:update(dt) then\n  print(\"After 3 seconds this will be printed every frame.\")\nend"
            },
            {
                "name": "once",
                "arguments": "duration, [max_duration]",
                "description": "Creates a timer which returns true once after `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every reset.",
                "example": "timer = step.once(3)\nif timer:update(dt) then\n  print(\"After 3 seconds this will be printed once.\")\nend"
            },
            {
                "name": "during",
                "arguments": "duration, [max_duration]",
                "description": "Creates a timer which returns true until after `duration` seconds. If `max_duration` is set the duration will be a random float between `duration` and `max_duration` every reset.",
                "example": "timer = step.once(3)\nif timer:update(dt) then\n  print(\"This will be printed every frame until 3 seconds have passed.\")\nend"
            },
            {
                "name": "reset",
                "description": "You can always reset your timer with `timer:reset()` or simply calling your timer without arguments.",
                "example": "timer:reset()\ntimer()"
            },
            {
                "name": "set",
                "arguments": "t, [noreset]",
                "description": "Change the time for this timer. Will also reset the timer unless `noreset` is `true`.",
                "example": "timer = step.every(5)\ntimer:set(3) --Now it will loop every 3 seconds instead."
            },
            {
                "name": "finish",
                "description": "Set the timer to the end so that on the next update it will return `true` for a `once` and `every` timer.",
                "example": "timer = step.new(4.7)\ntimer:finish()\nif timer(dt) then\n  print(\"On the first frame this will be printed and then again after 4.7 seconds.\")\nend"
            }
        ]
    }
]